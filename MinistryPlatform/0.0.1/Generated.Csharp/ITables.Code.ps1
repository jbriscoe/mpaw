// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerShell.MinistryPlatform.v001
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Tables operations.
    /// </summary>
    public partial interface ITables
    {
        /// <summary>
        /// Returns the list of tables available to the current users with
        /// basic metadata.
        /// </summary>
        /// <param name='search'>
        /// Optional table name pattern to be used for searching tables.
        /// Wildcards '?' and '*'
        /// can be used at any place. If parameter is Null or empty then all
        /// tables are returned.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IList<TableInfo>>> GetWithHttpMessagesAsync(string search = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the list of records from the specified table satisfying the
        /// provided
        /// search criteria.
        /// </summary>
        /// <param name='table'>
        /// Table to retrieve records from.
        /// </param>
        /// <param name='select'>
        /// Optional list of columns to be returned. If empty then all columns
        /// are returned.
        /// </param>
        /// <param name='filter'>
        /// Optional filtering expession to select the records to be returned.
        /// If empty then
        /// all records are returned.
        /// </param>
        /// <param name='orderby'>
        /// Optional list of columns to be sort the result. If empty then
        /// result is not sorted.
        /// </param>
        /// <param name='groupby'>
        /// Optional list of columns to group and aggregate result by.
        /// </param>
        /// <param name='having'>
        /// Optional expression to filter the aggregated result by.
        /// </param>
        /// <param name='top'>
        /// Optional maximum number of records to be returned. If not specified
        /// than 1000
        /// records are returned.
        /// </param>
        /// <param name='skip'>
        /// Optional number of records in the result to be skiped and the rest
        /// are returned.
        /// If not specified then all records are returned.
        /// </param>
        /// <param name='distinct'>
        /// Flag indicating that only distinct records must be returned.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<IDictionary<string, object>>>> Get1WithHttpMessagesAsync(string table, string select = default(string), string filter = default(string), string orderby = default(string), string groupby = default(string), string having = default(string), int? top = default(int?), int? skip = default(int?), bool? distinct = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates provided records in the specified table.
        /// </summary>
        /// <param name='table'>
        /// Table where records need to be updated.
        /// </param>
        /// <param name='records'>
        /// Array of records to be updated in the table.
        /// </param>
        /// <param name='select'>
        /// Optional list of columns to be returned. If empty then all columns
        /// are returned.
        /// </param>
        /// <param name='userId'>
        /// Optional identifier of the user on behalf of whom this operation is
        /// performed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<IDictionary<string, object>>>> PutWithHttpMessagesAsync(string table, IList<IDictionary<string, object>> records, string select = default(string), int? userId = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates new records in the specified table.
        /// </summary>
        /// <param name='table'>
        /// Table where records need to be created.
        /// </param>
        /// <param name='records'>
        /// Array of records to be added to the table.
        /// </param>
        /// <param name='select'>
        /// Optional list of columns to be returned. If empty then all columns
        /// are returned.
        /// </param>
        /// <param name='userId'>
        /// Optional identifier of the user on behalf of whom this operation is
        /// performed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<IDictionary<string, object>>>> PostWithHttpMessagesAsync(string table, IList<IDictionary<string, object>> records, string select = default(string), int? userId = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes multiple records from the specified table.
        /// </summary>
        /// <param name='table'>
        /// Table where records need to be deleted.
        /// </param>
        /// <param name='id'>
        /// Array of identifiers corresponding to records to be deleted.
        /// </param>
        /// <param name='select'>
        /// Optional list of columns to be returned. If empty then all columns
        /// are returned.
        /// </param>
        /// <param name='userId'>
        /// Optional identifier of the user on behalf of whom this operation is
        /// performed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<IDictionary<string, object>>>> DeleteWithHttpMessagesAsync(string table, IList<int?> id, string select = default(string), int? userId = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the list of records from the specified table satisfying the
        /// provided
        /// search criteria.
        /// </summary>
        /// <param name='table'>
        /// Table to retrieve records from.
        /// </param>
        /// <param name='parameters'>
        /// Parameters specifying the selected fields, the sorting direction,
        /// filtering, etc.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<IDictionary<string, object>>>> Get2WithHttpMessagesAsync(string table, QueryParameters parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a single record from the specified table by the records
        /// primary key value.
        /// </summary>
        /// <param name='table'>
        /// Table to retrieve records from.
        /// </param>
        /// <param name='id'>
        /// Record identifier.
        /// </param>
        /// <param name='select'>
        /// Optional list of columns to be returned. If empty then all columns
        /// are returned.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<IDictionary<string, object>>>> Get3WithHttpMessagesAsync(string table, int id, string select = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a single record from the specified table.
        /// </summary>
        /// <param name='table'>
        /// Table where record needs to be deleted.
        /// </param>
        /// <param name='id'>
        /// Identifier of the record to be deleted.
        /// </param>
        /// <param name='select'>
        /// Optional list of columns to be returned. If empty then all columns
        /// are returned.
        /// </param>
        /// <param name='userId'>
        /// Optional identifier of the user on behalf of whom this operation is
        /// performed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<IDictionary<string, object>>>> Delete1WithHttpMessagesAsync(string table, int id, string select = default(string), int? userId = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates copies of a record in the specified table.
        /// </summary>
        /// <param name='table'>
        /// Name of the table where record(s) must be created.
        /// </param>
        /// <param name='recordId'>
        /// Identifier of the record to be copied.
        /// </param>
        /// <param name='pattern'>
        /// Parameters defining the rules for generating the date sequence.
        /// </param>
        /// <param name='select'>
        /// Optional list of columns to be returned. If empty then all columns
        /// are returned.
        /// </param>
        /// <param name='userId'>
        /// Optional identifier of the user on behalf of whom this operation is
        /// performed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<IDictionary<string, object>>>> Post1WithHttpMessagesAsync(string table, int recordId, RecurrencePattern pattern, string select = default(string), int? userId = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes multiple records from the specified table.
        /// </summary>
        /// <param name='table'>
        /// Table where records need to be deleted.
        /// </param>
        /// <param name='parameters'>
        /// Parameters specifying the record(s) to be deleted, a list of
        /// culumns to be returned, etc.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<IDictionary<string, object>>>> Delete2WithHttpMessagesAsync(string table, DeleteParameters parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
