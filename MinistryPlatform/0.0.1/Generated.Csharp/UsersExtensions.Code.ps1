// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerShell.MinistryPlatform.v001
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Users.
    /// </summary>
    public static partial class UsersExtensions
    {
            /// <summary>
            /// Returns collection of user identifiers with display names matching the
            /// provided expression.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The string to be found in user's display name (may have wildcards).
            /// </param>
            public static IList<UserItem> Get(this IUsers operations, string name = default(string))
            {
                return operations.GetAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns collection of user identifiers with display names matching the
            /// provided expression.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The string to be found in user's display name (may have wildcards).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserItem>> GetAsync(this IUsers operations, string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the basic user information corresponding to the provided
            /// identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Identifier of the user whose information needs to be returned.
            /// </param>
            public static UserInfo Get1(this IUsers operations, int userId)
            {
                return operations.Get1Async(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the basic user information corresponding to the provided
            /// identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Identifier of the user whose information needs to be returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserInfo> Get1Async(this IUsers operations, int userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get1WithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates information associated with the specified user record.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Identifier of the user whose information needs to be updated.
            /// </param>
            /// <param name='user'>
            /// User information that needs to be updated.
            /// </param>
            public static UserInfo Put(this IUsers operations, int userId, UserInfo user)
            {
                return operations.PutAsync(userId, user).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates information associated with the specified user record.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Identifier of the user whose information needs to be updated.
            /// </param>
            /// <param name='user'>
            /// User information that needs to be updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserInfo> PutAsync(this IUsers operations, int userId, UserInfo user, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutWithHttpMessagesAsync(userId, user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets or changes the password on the user record corresponding to the
            /// provided identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Identifier of the user whose password needs to be changed.
            /// </param>
            /// <param name='newPassword'>
            /// User's new password to be set.
            /// </param>
            /// <param name='oldPassword'>
            /// User's old password or Null, if old password should not be checked.
            /// </param>
            public static object Post(this IUsers operations, int userId, string newPassword, string oldPassword = default(string))
            {
                return operations.PostAsync(userId, newPassword, oldPassword).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets or changes the password on the user record corresponding to the
            /// provided identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Identifier of the user whose password needs to be changed.
            /// </param>
            /// <param name='newPassword'>
            /// User's new password to be set.
            /// </param>
            /// <param name='oldPassword'>
            /// User's old password or Null, if old password should not be checked.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostAsync(this IUsers operations, int userId, string newPassword, string oldPassword = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(userId, newPassword, oldPassword, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
