// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerShell.MinistryPlatform.v001
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Tables.
    /// </summary>
    public static partial class TablesExtensions
    {
            /// <summary>
            /// Returns the list of tables available to the current users with basic
            /// metadata.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='search'>
            /// Optional table name pattern to be used for searching tables. Wildcards '?'
            /// and '*'
            /// can be used at any place. If parameter is Null or empty then all tables are
            /// returned.
            /// </param>
            public static IList<TableInfo> Get(this ITables operations, string search = default(string))
            {
                return operations.GetAsync(search).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the list of tables available to the current users with basic
            /// metadata.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='search'>
            /// Optional table name pattern to be used for searching tables. Wildcards '?'
            /// and '*'
            /// can be used at any place. If parameter is Null or empty then all tables are
            /// returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TableInfo>> GetAsync(this ITables operations, string search = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(search, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the list of records from the specified table satisfying the
            /// provided
            /// search criteria.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table to retrieve records from.
            /// </param>
            /// <param name='select'>
            /// Optional list of columns to be returned. If empty then all columns are
            /// returned.
            /// </param>
            /// <param name='filter'>
            /// Optional filtering expession to select the records to be returned. If empty
            /// then
            /// all records are returned.
            /// </param>
            /// <param name='orderby'>
            /// Optional list of columns to be sort the result. If empty then result is not
            /// sorted.
            /// </param>
            /// <param name='groupby'>
            /// Optional list of columns to group and aggregate result by.
            /// </param>
            /// <param name='having'>
            /// Optional expression to filter the aggregated result by.
            /// </param>
            /// <param name='top'>
            /// Optional maximum number of records to be returned. If not specified than
            /// 1000
            /// records are returned.
            /// </param>
            /// <param name='skip'>
            /// Optional number of records in the result to be skiped and the rest are
            /// returned.
            /// If not specified then all records are returned.
            /// </param>
            /// <param name='distinct'>
            /// Flag indicating that only distinct records must be returned.
            /// </param>
            public static IList<IDictionary<string, object>> Get1(this ITables operations, string table, string select = default(string), string filter = default(string), string orderby = default(string), string groupby = default(string), string having = default(string), int? top = default(int?), int? skip = default(int?), bool? distinct = default(bool?))
            {
                return operations.Get1Async(table, select, filter, orderby, groupby, having, top, skip, distinct).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the list of records from the specified table satisfying the
            /// provided
            /// search criteria.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table to retrieve records from.
            /// </param>
            /// <param name='select'>
            /// Optional list of columns to be returned. If empty then all columns are
            /// returned.
            /// </param>
            /// <param name='filter'>
            /// Optional filtering expession to select the records to be returned. If empty
            /// then
            /// all records are returned.
            /// </param>
            /// <param name='orderby'>
            /// Optional list of columns to be sort the result. If empty then result is not
            /// sorted.
            /// </param>
            /// <param name='groupby'>
            /// Optional list of columns to group and aggregate result by.
            /// </param>
            /// <param name='having'>
            /// Optional expression to filter the aggregated result by.
            /// </param>
            /// <param name='top'>
            /// Optional maximum number of records to be returned. If not specified than
            /// 1000
            /// records are returned.
            /// </param>
            /// <param name='skip'>
            /// Optional number of records in the result to be skiped and the rest are
            /// returned.
            /// If not specified then all records are returned.
            /// </param>
            /// <param name='distinct'>
            /// Flag indicating that only distinct records must be returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IDictionary<string, object>>> Get1Async(this ITables operations, string table, string select = default(string), string filter = default(string), string orderby = default(string), string groupby = default(string), string having = default(string), int? top = default(int?), int? skip = default(int?), bool? distinct = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get1WithHttpMessagesAsync(table, select, filter, orderby, groupby, having, top, skip, distinct, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates provided records in the specified table.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table where records need to be updated.
            /// </param>
            /// <param name='records'>
            /// Array of records to be updated in the table.
            /// </param>
            /// <param name='select'>
            /// Optional list of columns to be returned. If empty then all columns are
            /// returned.
            /// </param>
            /// <param name='userId'>
            /// Optional identifier of the user on behalf of whom this operation is
            /// performed.
            /// </param>
            public static IList<IDictionary<string, object>> Put(this ITables operations, string table, IList<IDictionary<string, object>> records, string select = default(string), int? userId = default(int?))
            {
                return operations.PutAsync(table, records, select, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates provided records in the specified table.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table where records need to be updated.
            /// </param>
            /// <param name='records'>
            /// Array of records to be updated in the table.
            /// </param>
            /// <param name='select'>
            /// Optional list of columns to be returned. If empty then all columns are
            /// returned.
            /// </param>
            /// <param name='userId'>
            /// Optional identifier of the user on behalf of whom this operation is
            /// performed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IDictionary<string, object>>> PutAsync(this ITables operations, string table, IList<IDictionary<string, object>> records, string select = default(string), int? userId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutWithHttpMessagesAsync(table, records, select, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates new records in the specified table.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table where records need to be created.
            /// </param>
            /// <param name='records'>
            /// Array of records to be added to the table.
            /// </param>
            /// <param name='select'>
            /// Optional list of columns to be returned. If empty then all columns are
            /// returned.
            /// </param>
            /// <param name='userId'>
            /// Optional identifier of the user on behalf of whom this operation is
            /// performed.
            /// </param>
            public static IList<IDictionary<string, object>> Post(this ITables operations, string table, IList<IDictionary<string, object>> records, string select = default(string), int? userId = default(int?))
            {
                return operations.PostAsync(table, records, select, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates new records in the specified table.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table where records need to be created.
            /// </param>
            /// <param name='records'>
            /// Array of records to be added to the table.
            /// </param>
            /// <param name='select'>
            /// Optional list of columns to be returned. If empty then all columns are
            /// returned.
            /// </param>
            /// <param name='userId'>
            /// Optional identifier of the user on behalf of whom this operation is
            /// performed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IDictionary<string, object>>> PostAsync(this ITables operations, string table, IList<IDictionary<string, object>> records, string select = default(string), int? userId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(table, records, select, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes multiple records from the specified table.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table where records need to be deleted.
            /// </param>
            /// <param name='id'>
            /// Array of identifiers corresponding to records to be deleted.
            /// </param>
            /// <param name='select'>
            /// Optional list of columns to be returned. If empty then all columns are
            /// returned.
            /// </param>
            /// <param name='userId'>
            /// Optional identifier of the user on behalf of whom this operation is
            /// performed.
            /// </param>
            public static IList<IDictionary<string, object>> Delete(this ITables operations, string table, IList<int?> id, string select = default(string), int? userId = default(int?))
            {
                return operations.DeleteAsync(table, id, select, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes multiple records from the specified table.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table where records need to be deleted.
            /// </param>
            /// <param name='id'>
            /// Array of identifiers corresponding to records to be deleted.
            /// </param>
            /// <param name='select'>
            /// Optional list of columns to be returned. If empty then all columns are
            /// returned.
            /// </param>
            /// <param name='userId'>
            /// Optional identifier of the user on behalf of whom this operation is
            /// performed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IDictionary<string, object>>> DeleteAsync(this ITables operations, string table, IList<int?> id, string select = default(string), int? userId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(table, id, select, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the list of records from the specified table satisfying the
            /// provided
            /// search criteria.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table to retrieve records from.
            /// </param>
            /// <param name='parameters'>
            /// Parameters specifying the selected fields, the sorting direction,
            /// filtering, etc.
            /// </param>
            public static IList<IDictionary<string, object>> Get2(this ITables operations, string table, QueryParameters parameters)
            {
                return operations.Get2Async(table, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the list of records from the specified table satisfying the
            /// provided
            /// search criteria.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table to retrieve records from.
            /// </param>
            /// <param name='parameters'>
            /// Parameters specifying the selected fields, the sorting direction,
            /// filtering, etc.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IDictionary<string, object>>> Get2Async(this ITables operations, string table, QueryParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get2WithHttpMessagesAsync(table, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a single record from the specified table by the records primary key
            /// value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table to retrieve records from.
            /// </param>
            /// <param name='id'>
            /// Record identifier.
            /// </param>
            /// <param name='select'>
            /// Optional list of columns to be returned. If empty then all columns are
            /// returned.
            /// </param>
            public static IList<IDictionary<string, object>> Get3(this ITables operations, string table, int id, string select = default(string))
            {
                return operations.Get3Async(table, id, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a single record from the specified table by the records primary key
            /// value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table to retrieve records from.
            /// </param>
            /// <param name='id'>
            /// Record identifier.
            /// </param>
            /// <param name='select'>
            /// Optional list of columns to be returned. If empty then all columns are
            /// returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IDictionary<string, object>>> Get3Async(this ITables operations, string table, int id, string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get3WithHttpMessagesAsync(table, id, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a single record from the specified table.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table where record needs to be deleted.
            /// </param>
            /// <param name='id'>
            /// Identifier of the record to be deleted.
            /// </param>
            /// <param name='select'>
            /// Optional list of columns to be returned. If empty then all columns are
            /// returned.
            /// </param>
            /// <param name='userId'>
            /// Optional identifier of the user on behalf of whom this operation is
            /// performed.
            /// </param>
            public static IList<IDictionary<string, object>> Delete1(this ITables operations, string table, int id, string select = default(string), int? userId = default(int?))
            {
                return operations.Delete1Async(table, id, select, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a single record from the specified table.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table where record needs to be deleted.
            /// </param>
            /// <param name='id'>
            /// Identifier of the record to be deleted.
            /// </param>
            /// <param name='select'>
            /// Optional list of columns to be returned. If empty then all columns are
            /// returned.
            /// </param>
            /// <param name='userId'>
            /// Optional identifier of the user on behalf of whom this operation is
            /// performed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IDictionary<string, object>>> Delete1Async(this ITables operations, string table, int id, string select = default(string), int? userId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Delete1WithHttpMessagesAsync(table, id, select, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates copies of a record in the specified table.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Name of the table where record(s) must be created.
            /// </param>
            /// <param name='recordId'>
            /// Identifier of the record to be copied.
            /// </param>
            /// <param name='pattern'>
            /// Parameters defining the rules for generating the date sequence.
            /// </param>
            /// <param name='select'>
            /// Optional list of columns to be returned. If empty then all columns are
            /// returned.
            /// </param>
            /// <param name='userId'>
            /// Optional identifier of the user on behalf of whom this operation is
            /// performed.
            /// </param>
            public static IList<IDictionary<string, object>> Post1(this ITables operations, string table, int recordId, RecurrencePattern pattern, string select = default(string), int? userId = default(int?))
            {
                return operations.Post1Async(table, recordId, pattern, select, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates copies of a record in the specified table.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Name of the table where record(s) must be created.
            /// </param>
            /// <param name='recordId'>
            /// Identifier of the record to be copied.
            /// </param>
            /// <param name='pattern'>
            /// Parameters defining the rules for generating the date sequence.
            /// </param>
            /// <param name='select'>
            /// Optional list of columns to be returned. If empty then all columns are
            /// returned.
            /// </param>
            /// <param name='userId'>
            /// Optional identifier of the user on behalf of whom this operation is
            /// performed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IDictionary<string, object>>> Post1Async(this ITables operations, string table, int recordId, RecurrencePattern pattern, string select = default(string), int? userId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post1WithHttpMessagesAsync(table, recordId, pattern, select, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes multiple records from the specified table.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table where records need to be deleted.
            /// </param>
            /// <param name='parameters'>
            /// Parameters specifying the record(s) to be deleted, a list of culumns to be
            /// returned, etc.
            /// </param>
            public static IList<IDictionary<string, object>> Delete2(this ITables operations, string table, DeleteParameters parameters)
            {
                return operations.Delete2Async(table, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes multiple records from the specified table.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table where records need to be deleted.
            /// </param>
            /// <param name='parameters'>
            /// Parameters specifying the record(s) to be deleted, a list of culumns to be
            /// returned, etc.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IDictionary<string, object>>> Delete2Async(this ITables operations, string table, DeleteParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Delete2WithHttpMessagesAsync(table, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
