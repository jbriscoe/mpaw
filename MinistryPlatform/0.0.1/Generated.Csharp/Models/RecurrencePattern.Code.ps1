// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerShell.MinistryPlatform.v001.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a set of rules defining a date sequence.
    /// </summary>
    public partial class RecurrencePattern
    {
        /// <summary>
        /// Initializes a new instance of the RecurrencePattern class.
        /// </summary>
        public RecurrencePattern()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RecurrencePattern class.
        /// </summary>
        /// <param name="type">Gets or sets the recurrence interval type:
        /// dayly, weekly, monthly, yearly. Possible values include: 'None',
        /// 'Daily', 'Weekly', 'Monthly', 'Yearly'</param>
        /// <param name="interval">Gets or sets the recurrence frequency or
        /// interval between subsequent events.
        /// The interval measure is specific to each recurrence type and can be
        /// a day, week, or month.</param>
        /// <param name="weekdays">Gets or sets the day(s) of week on which an
        /// occurrence may happen. Possible values include: 'None', 'Sunday',
        /// 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday',
        /// 'Day', 'Weekday', 'WeekendDay'</param>
        /// <param name="dayPosition">Gets or sets the day of week position in
        /// a month on which an occurrence may happen. Possible values include:
        /// 'Unspecified', 'First', 'Second', 'Third', 'Fourth', 'Last'</param>
        /// <param name="day">Gets or sets the specific day of the month on
        /// which an occurrence may happen (if specified,
        /// it must be between 1 and 31).</param>
        /// <param name="month">Gets or sets the specific month on which an
        /// occurrence may happen. Possible values include: 'Unspecified',
        /// 'January', 'February', 'March', 'April', 'May', 'June', 'July',
        /// 'August', 'September', 'October', 'November', 'December'</param>
        /// <param name="startDate">Gets or sets the start date/time of the
        /// sequence.</param>
        /// <param name="endDate">Gets or sets the end date/time of the
        /// sequence (optional).</param>
        /// <param name="totalOccurrences">Gets or sets the total or maximum
        /// number of occurrences to be generated (optional).</param>
        public RecurrencePattern(string type = default(string), int? interval = default(int?), string weekdays = default(string), string dayPosition = default(string), int? day = default(int?), string month = default(string), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), int? totalOccurrences = default(int?))
        {
            Type = type;
            Interval = interval;
            Weekdays = weekdays;
            DayPosition = dayPosition;
            Day = day;
            Month = month;
            StartDate = startDate;
            EndDate = endDate;
            TotalOccurrences = totalOccurrences;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the recurrence interval type: dayly, weekly, monthly,
        /// yearly. Possible values include: 'None', 'Daily', 'Weekly',
        /// 'Monthly', 'Yearly'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the recurrence frequency or interval between
        /// subsequent events.
        /// The interval measure is specific to each recurrence type and can be
        /// a day, week, or month.
        /// </summary>
        [JsonProperty(PropertyName = "Interval")]
        public int? Interval { get; set; }

        /// <summary>
        /// Gets or sets the day(s) of week on which an occurrence may happen.
        /// Possible values include: 'None', 'Sunday', 'Monday', 'Tuesday',
        /// 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Day', 'Weekday',
        /// 'WeekendDay'
        /// </summary>
        [JsonProperty(PropertyName = "Weekdays")]
        public string Weekdays { get; set; }

        /// <summary>
        /// Gets or sets the day of week position in a month on which an
        /// occurrence may happen. Possible values include: 'Unspecified',
        /// 'First', 'Second', 'Third', 'Fourth', 'Last'
        /// </summary>
        [JsonProperty(PropertyName = "DayPosition")]
        public string DayPosition { get; set; }

        /// <summary>
        /// Gets or sets the specific day of the month on which an occurrence
        /// may happen (if specified,
        /// it must be between 1 and 31).
        /// </summary>
        [JsonProperty(PropertyName = "Day")]
        public int? Day { get; set; }

        /// <summary>
        /// Gets or sets the specific month on which an occurrence may happen.
        /// Possible values include: 'Unspecified', 'January', 'February',
        /// 'March', 'April', 'May', 'June', 'July', 'August', 'September',
        /// 'October', 'November', 'December'
        /// </summary>
        [JsonProperty(PropertyName = "Month")]
        public string Month { get; set; }

        /// <summary>
        /// Gets or sets the start date/time of the sequence.
        /// </summary>
        [JsonProperty(PropertyName = "StartDate")]
        public System.DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or sets the end date/time of the sequence (optional).
        /// </summary>
        [JsonProperty(PropertyName = "EndDate")]
        public System.DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or sets the total or maximum number of occurrences to be
        /// generated (optional).
        /// </summary>
        [JsonProperty(PropertyName = "TotalOccurrences")]
        public int? TotalOccurrences { get; set; }

    }
}
