// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerShell.MinistryPlatform.v001
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Files.
    /// </summary>
    public static partial class FilesExtensions
    {
            /// <summary>
            /// Returns the metadata (descriptions) of the files attached to the specified
            /// record.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table to retrieve record from.
            /// </param>
            /// <param name='recordId'>
            /// Identifier of the record which files need to be retrieved.
            /// </param>
            /// <param name='defaultParameter'>
            /// Flag indicating that only default image file must be returned. If False or
            /// not
            /// specified then all files are returned.
            /// </param>
            public static IList<FileDescription> Get(this IFiles operations, string table, int recordId, bool? defaultParameter = default(bool?))
            {
                return operations.GetAsync(table, recordId, defaultParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the metadata (descriptions) of the files attached to the specified
            /// record.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table to retrieve record from.
            /// </param>
            /// <param name='recordId'>
            /// Identifier of the record which files need to be retrieved.
            /// </param>
            /// <param name='defaultParameter'>
            /// Flag indicating that only default image file must be returned. If False or
            /// not
            /// specified then all files are returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FileDescription>> GetAsync(this IFiles operations, string table, int recordId, bool? defaultParameter = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(table, recordId, defaultParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads and attaches multiple files to the specified record.
            /// </summary>
            /// <remarks>
            /// &lt;para&gt;This method expects parameters to be submitted in the multipart
            /// form
            /// data format. Multiple files can be uploaded in the single
            /// request.&lt;/para&gt;
            /// &lt;para&gt;Parameters {description}, {isDefaultImage},
            /// and {longestDimension} can be passed in URL or as form data.
            /// The URL value takes precedence, if parameter is found in both
            /// places.&lt;/para&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table to retrieve record from.
            /// </param>
            /// <param name='recordId'>
            /// Identifier of the record to attach the uploaded file(s).
            /// </param>
            /// <param name='description'>
            /// File description to be applied to all uploaded files.
            /// </param>
            /// <param name='defaultParameter'>
            /// Flag indicating that provided file is the default image for the specified
            /// record. If multiple files are uploaded then the first one is marked as
            /// default.
            /// </param>
            /// <param name='longestDimension'>
            /// The longest dimension (height or width) of the image, if original image
            /// needs to
            /// be resized, or 0 if no resizing needs to be done.
            /// </param>
            /// <param name='userId'>
            /// Optional identifier of the user on behalf of whom this operation is
            /// performed.
            /// </param>
            public static IList<FileDescription> Post(this IFiles operations, string table, int recordId, string description = default(string), bool? defaultParameter = default(bool?), int? longestDimension = default(int?), int? userId = default(int?))
            {
                return operations.PostAsync(table, recordId, description, defaultParameter, longestDimension, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads and attaches multiple files to the specified record.
            /// </summary>
            /// <remarks>
            /// &lt;para&gt;This method expects parameters to be submitted in the multipart
            /// form
            /// data format. Multiple files can be uploaded in the single
            /// request.&lt;/para&gt;
            /// &lt;para&gt;Parameters {description}, {isDefaultImage},
            /// and {longestDimension} can be passed in URL or as form data.
            /// The URL value takes precedence, if parameter is found in both
            /// places.&lt;/para&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='table'>
            /// Table to retrieve record from.
            /// </param>
            /// <param name='recordId'>
            /// Identifier of the record to attach the uploaded file(s).
            /// </param>
            /// <param name='description'>
            /// File description to be applied to all uploaded files.
            /// </param>
            /// <param name='defaultParameter'>
            /// Flag indicating that provided file is the default image for the specified
            /// record. If multiple files are uploaded then the first one is marked as
            /// default.
            /// </param>
            /// <param name='longestDimension'>
            /// The longest dimension (height or width) of the image, if original image
            /// needs to
            /// be resized, or 0 if no resizing needs to be done.
            /// </param>
            /// <param name='userId'>
            /// Optional identifier of the user on behalf of whom this operation is
            /// performed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FileDescription>> PostAsync(this IFiles operations, string table, int recordId, string description = default(string), bool? defaultParameter = default(bool?), int? longestDimension = default(int?), int? userId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(table, recordId, description, defaultParameter, longestDimension, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the content of the file corresponding to provided database
            /// identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileId'>
            /// Identifier of the file to be returned.
            /// </param>
            /// <param name='thumbnail'>
            /// Optional flag indicating that thumbnail image needs to be returned (applies
            /// to image files only).
            /// </param>
            public static object Get1(this IFiles operations, int fileId, bool? thumbnail = default(bool?))
            {
                return operations.Get1Async(fileId, thumbnail).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the content of the file corresponding to provided database
            /// identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileId'>
            /// Identifier of the file to be returned.
            /// </param>
            /// <param name='thumbnail'>
            /// Optional flag indicating that thumbnail image needs to be returned (applies
            /// to image files only).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Get1Async(this IFiles operations, int fileId, bool? thumbnail = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get1WithHttpMessagesAsync(fileId, thumbnail, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the content and/or metadata of the file corresponding to provided
            /// identifier.
            /// </summary>
            /// <remarks>
            /// &lt;para&gt;This method expects parameters to be submitted in the multipart
            /// form
            /// data format. A single file can be provided to replace the content of the
            /// existing
            /// file. If multiple files and uploaded, only the first one is
            /// processed.&lt;/para&gt;
            /// &lt;para&gt;Parameters {fileName}, {description},
            /// {isDefaultImage}, and {longestDimension} can
            /// be passed in URL or as form data. The URL value takes precedence, if
            /// parameter
            /// is found in both places.&lt;/para&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileId'>
            /// Identifier of the file to be updated.
            /// </param>
            /// <param name='fileName'>
            /// New logical file name. If not provided then file name is not updated.
            /// </param>
            /// <param name='description'>
            /// New file description. If not provided then description is not updated.
            /// </param>
            /// <param name='defaultParameter'>
            /// Flag indicating that provided file is the default image for the specified
            /// record. If not provided then flag is not updated.
            /// </param>
            /// <param name='longestDimension'>
            /// The longest dimension (height or width) of the image, if original image
            /// needs to
            /// be resized, or 0 if no resizing needs to be done.
            /// </param>
            /// <param name='userId'>
            /// Optional identifier of the user on behalf of whom this operation is
            /// performed.
            /// </param>
            public static FileDescription Put(this IFiles operations, int fileId, string fileName = default(string), string description = default(string), bool? defaultParameter = default(bool?), int? longestDimension = default(int?), int? userId = default(int?))
            {
                return operations.PutAsync(fileId, fileName, description, defaultParameter, longestDimension, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the content and/or metadata of the file corresponding to provided
            /// identifier.
            /// </summary>
            /// <remarks>
            /// &lt;para&gt;This method expects parameters to be submitted in the multipart
            /// form
            /// data format. A single file can be provided to replace the content of the
            /// existing
            /// file. If multiple files and uploaded, only the first one is
            /// processed.&lt;/para&gt;
            /// &lt;para&gt;Parameters {fileName}, {description},
            /// {isDefaultImage}, and {longestDimension} can
            /// be passed in URL or as form data. The URL value takes precedence, if
            /// parameter
            /// is found in both places.&lt;/para&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileId'>
            /// Identifier of the file to be updated.
            /// </param>
            /// <param name='fileName'>
            /// New logical file name. If not provided then file name is not updated.
            /// </param>
            /// <param name='description'>
            /// New file description. If not provided then description is not updated.
            /// </param>
            /// <param name='defaultParameter'>
            /// Flag indicating that provided file is the default image for the specified
            /// record. If not provided then flag is not updated.
            /// </param>
            /// <param name='longestDimension'>
            /// The longest dimension (height or width) of the image, if original image
            /// needs to
            /// be resized, or 0 if no resizing needs to be done.
            /// </param>
            /// <param name='userId'>
            /// Optional identifier of the user on behalf of whom this operation is
            /// performed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileDescription> PutAsync(this IFiles operations, int fileId, string fileName = default(string), string description = default(string), bool? defaultParameter = default(bool?), int? longestDimension = default(int?), int? userId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutWithHttpMessagesAsync(fileId, fileName, description, defaultParameter, longestDimension, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the file corresponding to provided identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileId'>
            /// Identifier of the file to be deleted.
            /// </param>
            /// <param name='userId'>
            /// Optional identifier of the user on behalf of whom this operation is
            /// performed.
            /// </param>
            public static object Delete(this IFiles operations, int fileId, int? userId = default(int?))
            {
                return operations.DeleteAsync(fileId, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the file corresponding to provided identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileId'>
            /// Identifier of the file to be deleted.
            /// </param>
            /// <param name='userId'>
            /// Optional identifier of the user on behalf of whom this operation is
            /// performed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this IFiles operations, int fileId, int? userId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(fileId, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the content of the file corresponding to provided globally unique
            /// identifier. This method
            /// does NOT require authentication.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uniqueFileId'>
            /// Globally unique identifier of the file to be returned.
            /// </param>
            /// <param name='thumbnail'>
            /// Optional flag indicating that thumbnail image needs to be returned (applies
            /// to image files only).
            /// </param>
            public static object Get2(this IFiles operations, string uniqueFileId, bool? thumbnail = default(bool?))
            {
                return operations.Get2Async(uniqueFileId, thumbnail).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the content of the file corresponding to provided globally unique
            /// identifier. This method
            /// does NOT require authentication.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uniqueFileId'>
            /// Globally unique identifier of the file to be returned.
            /// </param>
            /// <param name='thumbnail'>
            /// Optional flag indicating that thumbnail image needs to be returned (applies
            /// to image files only).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Get2Async(this IFiles operations, string uniqueFileId, bool? thumbnail = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get2WithHttpMessagesAsync(uniqueFileId, thumbnail, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the file metadata (description) corresponding to provided database
            /// identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileId'>
            /// Identifier of the file which metadata needs to be returned.
            /// </param>
            public static object GetMetadata(this IFiles operations, int fileId)
            {
                return operations.GetMetadataAsync(fileId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the file metadata (description) corresponding to provided database
            /// identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileId'>
            /// Identifier of the file which metadata needs to be returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetMetadataAsync(this IFiles operations, int fileId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMetadataWithHttpMessagesAsync(fileId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the file metadata (description) corresponding to provided globally
            /// unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uniqueFileId'>
            /// Globally unique identifier of the file which metadata needs to be returned.
            /// </param>
            public static object GetMetadata1(this IFiles operations, string uniqueFileId)
            {
                return operations.GetMetadata1Async(uniqueFileId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the file metadata (description) corresponding to provided globally
            /// unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uniqueFileId'>
            /// Globally unique identifier of the file which metadata needs to be returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetMetadata1Async(this IFiles operations, string uniqueFileId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMetadata1WithHttpMessagesAsync(uniqueFileId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
